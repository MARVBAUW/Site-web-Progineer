#!/usr/bin/env node

/**
 * Script pour configurer l'automatisation compl√®te du syst√®me de veille
 */

import { writeFileSync, mkdirSync } from 'fs';
import path from 'path';

console.log('üöÄ Configuration de l\'automatisation compl√®te');
console.log('==============================================');

// Cr√©er le dossier .github/workflows s'il n'existe pas
try {
  mkdirSync('.github', { recursive: true });
  mkdirSync('.github/workflows', { recursive: true });
  console.log('üìÅ Dossier .github/workflows cr√©√©');
} catch (error) {
  console.log('üìÅ Dossier .github/workflows existe d√©j√†');
}

// Cr√©er le workflow GitHub Actions
const githubWorkflow = `name: G√©n√©ration Automatique Articles Veille

on:
  schedule:
    # Lundi, Mercredi, Vendredi √† 8h00 UTC (9h00 Paris)
    - cron: '0 8 * * 1,3,5'
  workflow_dispatch: # Permet de d√©clencher manuellement

jobs:
  generate-article:
    runs-on: ubuntu-latest
    
    steps:
    - name: G√©n√©rer article de veille
      run: |
        curl -X POST \\
          -H "Content-Type: application/json" \\
          -H "Authorization: Bearer \${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \\
          -d '{
            "topic": "√âvolutions r√©glementaires construction",
            "category": "reglementation",
            "keywords": ["RE2020", "construction", "PACA", "r√©glementation"]
          }' \\
          https://your-project.supabase.co/functions/v1/generate-veille-article
      
    - name: Notification succ√®s
      if: success()
      run: echo "‚úÖ Article de veille g√©n√©r√© avec succ√®s"
      
    - name: Notification √©chec
      if: failure()
      run: echo "‚ùå Erreur lors de la g√©n√©ration d'article"
`;

writeFileSync('.github/workflows/veille-automation.yml', githubWorkflow);
console.log('‚úÖ Workflow GitHub Actions cr√©√© : .github/workflows/veille-automation.yml');

// Cr√©er le script de test de l'Edge Function
const testEdgeFunction = `#!/usr/bin/env node

/**
 * Script pour tester l'Edge Function d√©ploy√©e
 */

import { readFileSync } from 'fs';
import path from 'path';

// Charger les variables d'environnement
function loadEnv() {
  try {
    const envContent = readFileSync(path.join(process.cwd(), '.env'), 'utf8');
    envContent.split('\\n').forEach((line) => {
      const trimmedLine = line.trim();
      if (trimmedLine && !trimmedLine.startsWith('#')) {
        const [key, ...valueParts] = trimmedLine.split('=');
        if (key && valueParts.length > 0) {
          process.env[key.trim()] = valueParts.join('=').trim();
        }
      }
    });
  } catch (error) {
    console.log('Erreur chargement .env:', error.message);
  }
}

loadEnv();

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

async function testEdgeFunction() {
  console.log('üß™ Test de l\\'Edge Function d√©ploy√©e');
  console.log('===================================');
  
  if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
    console.log('‚ùå Variables d\\'environnement manquantes');
    return;
  }
  
  const url = \`\${SUPABASE_URL}/functions/v1/generate-veille-article\`;
  
  try {
    console.log('üì° Appel de l\\'Edge Function...');
    console.log('URL:', url);
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': \`Bearer \${SUPABASE_SERVICE_ROLE_KEY}\`
      },
      body: JSON.stringify({
        topic: 'Test automatisation RE2020',
        category: 'reglementation',
        keywords: ['RE2020', 'test', 'automatisation', 'PACA'],
        sources: []
      })
    });
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Edge Function fonctionne !');
      console.log('üìù Article g√©n√©r√©:', result.article?.title || 'Titre non disponible');
    } else {
      console.log('‚ö†Ô∏è  Edge Function pas encore d√©ploy√©e ou erreur');
      console.log('Status:', response.status);
      console.log('Message:', await response.text());
    }
    
  } catch (error) {
    console.log('‚ùå Erreur lors du test:', error.message);
    console.log('üí° L\\'Edge Function n\\'est probablement pas encore d√©ploy√©e');
  }
}

testEdgeFunction();
`;

writeFileSync('scripts/test-edge-function.mjs', testEdgeFunction);
console.log('‚úÖ Script de test cr√©√© : scripts/test-edge-function.mjs');

// Cr√©er le guide de d√©ploiement
const deploymentGuide = `# üöÄ Guide de D√©ploiement Automatisation Compl√®te

## √âtape 1 : D√©ployer l'Edge Function Supabase

1. **Connectez-vous √† votre dashboard Supabase** : https://supabase.com/dashboard
2. **Allez dans "Edge Functions"** (menu de gauche)
3. **Cliquez sur "Create a new function"**
4. **Nom de la fonction** : \`generate-veille-article\`
5. **Copiez le code** depuis \`supabase/functions/generate-veille-article/index.ts\`
6. **Configurez les variables d'environnement** dans Supabase :
   - \`SUPABASE_URL\` = https://your-project.supabase.co
   - \`SUPABASE_ANON_KEY\` = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
   - \`ANTHROPIC_API_KEY\` = sk-ant-api03-your-key-here
7. **D√©ployez la fonction**

## √âtape 2 : Tester l'Edge Function

\`\`\`bash
npm run test:edge-function
\`\`\`

## √âtape 3 : Configurer GitHub Actions (Automatisation)

1. **Poussez votre code sur GitHub** (si pas d√©j√† fait)
2. **Allez dans Settings ‚Üí Secrets and variables ‚Üí Actions**
3. **Ajoutez le secret** :
   - Nom : \`SUPABASE_SERVICE_ROLE_KEY\`
   - Valeur : \`your-jwt-key-here\`

## √âtape 4 : V√©rifier l'automatisation

- **Workflow cr√©√©** : \`.github/workflows/veille-automation.yml\`
- **Planning** : Lundi, Mercredi, Vendredi √† 8h00 UTC (9h00 Paris)
- **Test manuel** : Onglet "Actions" ‚Üí "Run workflow"

## üéØ R√©sultat Final

Une fois configur√©, votre syst√®me :
- ‚úÖ G√©n√®re automatiquement des articles 3x/semaine
- ‚úÖ Fonctionne sans votre PC (serveurs GitHub/Supabase)
- ‚úÖ Sauvegarde les articles dans votre base Supabase
- ‚úÖ Articles visibles sur votre site d√©ploy√©

## üîß Commandes Utiles

\`\`\`bash
# Tester l'Edge Function
npm run test:edge-function

# G√©n√©rer un article manuellement
npm run veille:test

# Voir les logs
npm run veille:logs
\`\`\`
`;

writeFileSync('GUIDE_AUTOMATISATION_COMPLETE.md', deploymentGuide);
console.log('‚úÖ Guide cr√©√© : GUIDE_AUTOMATISATION_COMPLETE.md');

// Ajouter les commandes NPM
const packageJsonPath = 'package.json';
try {
  const packageJson = JSON.parse(readFileSync(packageJsonPath, 'utf8'));
  
  packageJson.scripts = {
    ...packageJson.scripts,
    'test:edge-function': 'node scripts/test-edge-function.mjs',
    'setup:automation': 'node scripts/setup-automation.mjs'
  };
  
  writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
  console.log('‚úÖ Commandes NPM ajout√©es au package.json');
} catch (error) {
  console.log('‚ö†Ô∏è  Impossible de modifier package.json:', error.message);
}

console.log('\\nüéâ Configuration termin√©e !');
console.log('============================');
console.log('üìñ Consultez GUIDE_AUTOMATISATION_COMPLETE.md pour les prochaines √©tapes');
console.log('üß™ Testez avec : npm run test:edge-function'); 