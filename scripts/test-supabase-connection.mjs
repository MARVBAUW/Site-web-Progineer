#!/usr/bin/env node

/**
 * Script de test pour v√©rifier la connexion Supabase et l'existence de la table veille_articles
 */

import { createClient } from '@supabase/supabase-js';
import { readFileSync } from 'fs';
import path from 'path';

// Charger les variables d'environnement depuis .env.local ou .env
function loadEnvFile() {
  try {
    // Essayer d'abord .env.local, puis .env
    let envPath = path.join(process.cwd(), '.env.local');
    let envContent;
    
    try {
      envContent = readFileSync(envPath, 'utf8');
      console.log('‚úÖ Fichier .env.local trouv√© et charg√©');
    } catch {
      envPath = path.join(process.cwd(), '.env');
      envContent = readFileSync(envPath, 'utf8');
      console.log('‚úÖ Fichier .env trouv√© et charg√©');
    }
    
    envContent.split('\n').forEach((line, index) => {
      const trimmedLine = line.trim();
      if (trimmedLine && !trimmedLine.startsWith('#')) {
        const [key, ...valueParts] = trimmedLine.split('=');
        if (key && valueParts.length > 0) {
          const value = valueParts.join('=').trim();
          process.env[key.trim()] = value;
          console.log(`   Ligne ${index + 1}: ${key.trim()} = ${value.substring(0, 30)}...`);
        }
      }
    });
    
    console.log('\nüîç Variables d√©tect√©es apr√®s chargement:');
    console.log(`   SUPABASE_URL: ${process.env.SUPABASE_URL ? 'D√©finie' : 'Non d√©finie'}`);
    console.log(`   SUPABASE_ANON_KEY: ${process.env.SUPABASE_ANON_KEY ? 'D√©finie' : 'Non d√©finie'}`);
    console.log(`   VITE_SUPABASE_URL: ${process.env.VITE_SUPABASE_URL ? 'D√©finie' : 'Non d√©finie'}`);
    console.log(`   VITE_SUPABASE_ANON_KEY: ${process.env.VITE_SUPABASE_ANON_KEY ? 'D√©finie' : 'Non d√©finie'}`);
    
  } catch (error) {
    console.log('‚ö†Ô∏è  Aucun fichier .env trouv√©, utilisation des variables syst√®me');
  }
}

// Charger les variables d'environnement
loadEnvFile();

const SUPABASE_URL = process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY || process.env.VITE_SUPABASE_ANON_KEY;

async function testSupabaseConnection() {
  console.log('üß™ Test de connexion Supabase');
  console.log('================================');
  
  // V√©rifier les variables d'environnement
  if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
    console.error('‚ùå Variables d\'environnement manquantes :');
    if (!SUPABASE_URL) console.error('   - SUPABASE_URL');
    if (!SUPABASE_ANON_KEY) console.error('   - SUPABASE_ANON_KEY');
    return;
  }

  console.log('‚úÖ Variables d\'environnement configur√©es');
  console.log(`üì° URL Supabase: ${SUPABASE_URL}`);
  console.log(`üîë Cl√© Anon: ${SUPABASE_ANON_KEY.substring(0, 20)}...`);

  try {
    // Cr√©er le client Supabase
    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    console.log('‚úÖ Client Supabase cr√©√©');

    // Test 1: V√©rifier la connexion et l'existence de la table
    console.log('\nüîç Test 1: V√©rification de la connexion...');
    const { data: healthCheck, error: healthError } = await supabase
      .from('veille_articles')
      .select('count', { count: 'exact', head: true });

    if (healthError) {
      if (healthError.message.includes('relation "veille_articles" does not exist')) {
        console.log('‚ö†Ô∏è  Table veille_articles n\'existe pas encore');
        console.log('üìù Veuillez ex√©cuter la migration SQL dans le dashboard Supabase');
        return;
      } else if (healthError.message.includes('permission denied') || healthError.message.includes('RLS')) {
        console.log('‚ö†Ô∏è  Acc√®s restreint par RLS - C\'est normal pour la s√©curit√©');
        console.log('‚úÖ Table veille_articles existe et RLS est activ√©');
      } else {
        console.log('‚ö†Ô∏è  Erreur de connexion:', healthError.message);
        throw healthError;
      }
    } else {
      console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie');
      console.log(`üìä Nombre d'articles existants: ${healthCheck || 0}`);
    }

    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie');
    console.log(`üìä Nombre d'articles existants: ${healthCheck || 0}`);

    // Test 2: V√©rifier la structure de la table
    console.log('\nüîç Test 2: V√©rification de la structure de la table...');
    const { data: tableInfo, error: tableError } = await supabase
      .from('veille_articles')
      .select('*')
      .limit(1);

    if (tableError) {
      throw tableError;
    }

    console.log('‚úÖ Structure de la table v√©rifi√©e');

    // Test 3: Test d'insertion (si autoris√©)
    console.log('\nüîç Test 3: Test d\'insertion d\'un article de test...');
    const testArticle = {
      id: `test-${Date.now()}`,
      title: 'Article de test - Connexion Supabase',
      excerpt: 'Ceci est un article de test pour v√©rifier la connexion.',
      content: '<p>Contenu de test pour v√©rifier que l\'insertion fonctionne.</p>',
      category: 'reglementation',
      priority: 'faible',
      tags: ['test', 'connexion'],
      published_at: new Date().toISOString().split('T')[0],
      read_time: '1 min',
      views: 0,
      author: 'Test Script',
      sources: [],
      seo_keywords: ['test', 'supabase'],
      is_published: false
    };

    const { data: insertData, error: insertError } = await supabase
      .from('veille_articles')
      .insert([testArticle])
      .select();

    if (insertError) {
      if (insertError.message.includes('permission denied') || insertError.message.includes('RLS')) {
        console.log('‚ö†Ô∏è  Insertion non autoris√©e (RLS activ√©) - C\'est normal');
        console.log('‚úÖ La s√©curit√© RLS fonctionne correctement');
      } else {
        throw insertError;
      }
    } else {
      console.log('‚úÖ Article de test ins√©r√© avec succ√®s');
      console.log(`üìù ID de l'article: ${insertData[0].id}`);

      // Nettoyer l'article de test
      await supabase
        .from('veille_articles')
        .delete()
        .eq('id', testArticle.id);
      console.log('üßπ Article de test supprim√©');
    }

    // Test 4: Test de lecture des articles publi√©s
    console.log('\nüîç Test 4: Test de lecture des articles publi√©s...');
    const { data: publishedArticles, error: readError } = await supabase
      .from('veille_articles')
      .select('id, title, category, is_published')
      .eq('is_published', true)
      .limit(5);

    if (readError) {
      throw readError;
    }

    console.log('‚úÖ Lecture des articles publi√©s r√©ussie');
    console.log(`üìö Articles publi√©s trouv√©s: ${publishedArticles.length}`);

    if (publishedArticles.length > 0) {
      console.log('üìã Aper√ßu des articles:');
      publishedArticles.forEach((article, index) => {
        console.log(`   ${index + 1}. ${article.title} (${article.category})`);
      });
    }

    console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s !');
    console.log('‚úÖ Votre configuration Supabase est op√©rationnelle');

  } catch (error) {
    console.error('\n‚ùå Erreur lors du test:', error.message);
    console.error('üìã D√©tails de l\'erreur:', error);
    console.error('üîß V√©rifiez votre configuration Supabase');
  }
}

// Ex√©cuter le test
testSupabaseConnection().catch(error => {
  console.error('‚ùå Erreur fatale:', error);
  process.exit(1);
}); 